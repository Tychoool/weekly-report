第七周（12.10-12.16）


学习内容：

c语言程序设计：按位运算；
数据结构：逆转链表，最大子列和，树与树的表示，二叉树的存储结构及先序中序后序遍历


问题和总结：

1.循环、递归、遍历、迭代的区别和联系：

表示“重复”这个含义的词有很多, 比如 循环(loop), 递归(recursion), 遍历(traversal), 迭代(iterate).
循环算是最基础的概念, 凡是重复执行一段代码, 都可以称之为循环. 大部分的递归, 遍历, 迭代, 都是循环.

递归是重复调用函数自身实现循环。迭代是函数内某段代码实现循环，而迭代与普通循环的区别是：循环代码中参与运算的变量同时是保存结果的变量，当前保存的结果作为下一次循环计算的初始值。



// 迭代，重复一定的算法，达到想要的目的。数学上二分法，牛顿法是很好的迭代例子
function iteration(x){
   var sum=1; 
   for(x; x>=1; x--){
       sum = sum*x;
   }
}


// 递归，自身调用自身的迭代就是递归。
// 但是正式定义好像不是这么说的。这只是我个人理解
function recursion(x){
   if(x>1){
       return x*recursion(x-1);
   }else{
       return 1;
   }
}


迭代式开发：迭代式开发应该是取自"迭代(数学)"的概念的, 意思是把开发过程划分成若干个小目标, 对每个小目标单独进行设计, 开发, 测试, 逐步地完成整个项目. 而传统的开发过程是纯线性的, 先统一设计, 再统一编码, 再统一测试. 相比于传统开发过程, 迭代式开发更灵活, 能够适应需求的变更, 及时验证设计的可行性等等的...

迭代开发更接近循环的意思，是指多次按照开发，测试，发布这样的周期循环来完成一个软件产品的最终发布。而不是试图一次性完成所有工作，发布最终版本


结论：
循环(loop) - 最基础的概念, 所有重复的行为
递归(recursion) - 在函数内调用自身, 将复杂情况逐步转化成基本情况
(数学)迭代(iterate) - 在多次循环中逐步接近结果
(编程)迭代(iterate) - 按顺序访问线性结构中的每一项
遍历(traversal) - 按规则访问非线性结构中的每一项
这些概念都表示“重复”的含义, 彼此互相交叉, 在上下文清晰的情况下, 不必做过于细致的区分。



2.树的遍历-递归遍历【前序，中序，后序】

树的遍历一般分为两种形式，有递归遍历和迭代方式
这里介绍的是递归方式

递归的定义：
程序调用自身的编程技巧称为递归（ recursion）。
递归作为一种算法在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。

递归过程
递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。

代码模板
void recur(参数){
//边界条件
//调用本身
}

遍历分类
主要有三种：
前序遍历
中序遍历
后序遍历

树的前中后序是以根节点作为视角的

前序遍历
先遍历中，然后左边，再右边

中序遍历
左，中，右

后序遍历
左，右，中
（具体过程及代码在笔记本）



3.二分查找的二分法和黄金分割点比较

二分法每次能有100%的概率能只剩50%的数据，每次剩下的期望为50%，即每次除以2。所以时间复杂度是log2(N).
而黄金分割的话每次都有0.618的概率剩0.618，0.382的概率剩0.382，每次剩下的期望为0.528，即每次除以1.894。所以时间复杂度是log1.894(N)，即1.085log2(N).
虽然两者都是O(logN)类，但是系数不同，黄金分割法所需时间约为二分法的1.085倍。
假设分割点距左侧的距离除以全长等于p，那么每次剩下的期望为个全长。要让这个期望最小，我们知道p要等于1-p。所以p=0.5。所以二分法分在正中。



4.森林转二叉树

1)思路
和树的兄弟节点很像，只是把树的左边的树也当做根节点的兄弟
就是对于任一个节点：

左指针指向它的第一个孩子
右指针指向它的兄弟/旁边的树

2)需要注意的是森林中的叶子结点和二叉树的叶子结点定义不同
二叉树：既没有左孩子(lchild)也没有右孩子(rchild)
森林：没有firstchild但是可以有nextsibling



5.m叉树中各类结点数之间的关系
在二叉树中，我们知道叶结点总数与有两个儿子的结点总数之间的关系是：.
那么类似关系是否可以推广到m叉树中？也就是，如果在m叉树中，叶结点总数是，有一个儿子的结点总数是，有2个儿子的结点总数是，有3个儿子的结点总数是，...。那么，之间存在什么关系？

答：n0 = n2 + 2*n3 + 3*n4+…+(m-2)*n(m-1)+(m-1)*n(m)+1



