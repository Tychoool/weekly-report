第五周（11.19-11.25）


学习内容：

c语言程序设计：结构类型，链表；
数据结构：链式存储，多重链表


问题和总结：

1.结构和数组的联系与区别：

数组和结构相似的地方是都不再是单一的原子类型，而是一个集合。区别在于数组是相同类型元素（元素可以是原子类型的整型、浮
点型、字符型或者结构体、数组等）的集合，而结构是不同类型元素（元素可以是原子类型的整型、浮点型、字符型或者结构体、数
组等）的集合。所以结构无所不包，当然结构中也可以定义相同类型的元素，而数组则不然，从这个角度，结构体的普世意义更为广
泛，但是毫无疑问，如果结构定义为成员类型是相同的，那么相比定义数组，要麻烦的多。

在取地址方面两者也有根本的不同，数组的数组名就代表首地址，依次+1，+2……就可以表示其他元素的地址，不需要使用取地址运算
符&；而结构本身只是一系列不同类型元素的集合，本质上只是把很多类型的元素放在一起，以适应具体生产生活中数据单位（例如一
个学生的成绩信息、商家的顾客信息等）的存储方式，所以取地址依然需要采用取地址运算。

两者的访问方式也不同，数组可以直接利用下标访问，而结构必须使用结构中成员的变量名。

结构的定义一般放在主函数外面，这样其他函数就可以使用这种类型的结构定义具体的结构；而数组则由于定义和使用都较为简单，可
以直接在需要使用的函数中定义即可。


2.指向结构体的指针p++与p = p->next的区别：

在编写 遍历链表的过程中需要让指向结构体的指针移动到下一节点这一操作的过程中，发现了使用p++，程序不按预期执行，结果发现p++与p = p->next 的区别。

#include <stdio.h>
#include <stdlib.h>

typedef struct Lnode
{
    int a;
    struct Lnode * next;
} Lnode , * Lp;

int main(void)
{
	// 定义了3个结点

    Lnode node1;	
    Lnode node2;
    Lnode node3;
    
	// 定义了3个指向结点的指针
    Lp p1 = &node1;		// p1 指向 第1个结点
    Lp p2 = &node2;		// p2 指向 第2个结点
    Lp p3 = &node3;		// p3 指向 第3个结点

    printf("node 2 address is  %p \n", &node2);
    printf("node1.next is      %p \n", node1.next);

    printf("p2:      %p \n", p2);// 查看p2 指向的结点的地址，也就是node2的地址
    printf("p2 + 1 : %p \n", p2+1);
    
    printf("p2->next %p \n", p2 = p2->next);

    return 0;
}

运行后发现p2+1与p->next指向的地址不同，

node 2 address is  0061fef4	
node1.next is      0061fef4
// 这里前六位数值相同，我们只看后两位	 
p2:      0061fef4		// f4 的十进制为 244
p2 + 1 : 0061fefc		//fc 的十进制为 252
p2->next 0061feec   	//ec的十进制为 236



这时候你也许发现了，p2->next的地址比p2低8个字节，说明结点的存储是从高地址向低地址进行的， 但是p2+1使得p2增加了p2指向的类型（这里是struct node 占8字节）所占字节大小，所以p2+1指向的并非下一个结点。

	printf("size of Lnode %zd \n", sizeof(Lnode));		8bytes
    printf("size of Lp %zd \n", sizeof(Lp));			4bytes
    printf("size of int %zd \n", sizeof(int));			4bytes



Ps，在不同的实现下，结构体变量所占的字节数不一定是 其成员所占字节数总和。有的系统可能使用内存对齐规则，并且有的系统还可能从低地址向高地址存放结点。总之使用p = p->next 较合理。

原文链接：https://blog.csdn.net/weixin_42912350/article/details/83514272



3.比较线性表的顺序存储结构和链式存储结构

存储分配方式

顺序存储结构用一段连续的存储单元依次存储线性表的数据元素。

单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素。


时间性能

<1>查找

顺序存储结构O(1)

单链表O(n)

<2>插入和删除

顺序存储结构需要平均移动表长一半的元素，时间为O(n)

单链表在计算出某位置的指针后，插入和删除时间仅为O(1)

 
空间性能

顺序存储结构需要预分配存储空间，分大了，容易造成空间浪费，分小了，容易发生溢出。

单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制。

 
结论：

<1>若线性表需要频繁查找，很少进行插入和删除操作时，宜采用顺序存储结构。

<2>若需要频繁插入和删除时，宜采用单链表结构。



